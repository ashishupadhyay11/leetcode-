#include <bits/stdc++.h>
#define pb push_back
using namespace std;
bool solve (vector<int>adj[], int n, int m, vector<int>&color, int i){
    if(i==n)
        return true;
        
    bool sol = false;
    unordered_set<int>neigh;
    for(int k=0; k<adj[i].size();k++)
        neigh.insert(color[adj[i][k]]);
    for(int c=0; c<m ;c++){
        if(neigh.find(c)==neigh.end()){
            color[i]=c;
            sol = sol || solve(adj, n,m,color, i+1); //either go till last vertex
            color[i]=-1;                             //backtrack where colors not found
        }
    }
    return sol;
}
int main() {
	int t;
	cin>>t;
	while(t--){
	    int n,m,e;
	    cin>>n>>m>>e;
	    vector<int>adj[n];                          //Vector of int arrays
	    for(int i=0;i<e;i++){
	        int a,b;
	        cin>>a>>b;
	        adj[a-1].pb(b-1); 
	        adj[b-1].pb(a-1);
	    }
	   vector<int>color(n, -1);
	   cout<<solve(adj, n,m,color,0)<<endl;
	}
	return 0;
}