https://www.youtube.com/watch?v=jFwREev_yvU
#include <bits/stdc++.h>
using namespace std;
bool issafe(int board[][10], int currow, int j, int n){ //j is current col
    //check for queen in col
    for(int row=0; row<currow ; row++)
        if(board[row][j]==1)
            return false;
    //check for queen in left diagonal
    int x = currow, y = j;
    while(x>=0 && y>=0){
        if(board[x][y]==1)
            return false;
        x--, y--;
    }
    //check for queen in right diagonal
    x=currow, y=j;
    while(x>=0 && y<n){
        if(board[x][y]==1)
            return false;
        x--,y++;
    }
    //No queens found, position is valid
    return true;
}
bool solveNqueen(int board[][10], int currow, int n){ //we will check row wise
    //base case
    if(currow==n){
        vector<int>res;
        for(int i=0; i<n;i++){
            for(int j=0; j<n;j++){
                if(board[i][j]==1)
                    res.push_back(j+1);
            }
        }
        cout<<"[";
        for(int i=0; i<res.size();i++)
            cout<<res[i]<<" ";
        cout<<"]"<<endl;
        return false;
    }
    
    //recursion
    for(int j=0; j<n ; j++){
        if(issafe(board, currow, j, n)){
            //Place queen in currow, j assuming they are valid
            board[currow][j]=1;
            bool nextQvalid = solveNqueen(board, currow+1,n);
            if(nextQvalid)
                return true;
        }
        //if control reaches this point it means currow and j are invalid
        board[currow][j]=0;
    }
    return false;
}

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    
	    int board[10][10] = {0};
	    solveNqueen(board, 0, n);
	}
	return 0;
}