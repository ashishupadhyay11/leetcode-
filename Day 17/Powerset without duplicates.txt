//Recursive backtracking
class Solution {
public:
    void solve(vector<int>&nums, vector<int>&subset, vector<vector<int>>&result, int start){
        result.push_back(subset);
        for(int i=start; i<nums.size();i++){
            subset.push_back(nums[i]);
            solve(nums,subset,result,i+1);
            subset.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>result;
        vector<int>subset;
        solve(nums,subset,result,0);
        return result;
    }
};

//Iterative 
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> subs = {{}};
        for (int num : nums) {
            int n = subs.size();
            for (int i = 0; i < n; i++) {
                subs.push_back(subs[i]); 
                subs.back().push_back(num);
            }
        }
        return subs;
    }
}; 