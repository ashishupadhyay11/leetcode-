class Solution {
public:
    int solve(vector<int>&nums, int n, int target, vector<vector<int>>&dp){
        if(target==0)
            return 1;
        if(target<0)
            return 0;
        if(n==0)
            return 0;
        if(dp[n][target]!=-1)
            return dp[n][target];
        return dp[n][target] = solve(nums,n-1,target-nums[n-1],dp) || solve(nums,n-1,target,dp);
    }
    bool canPartition(vector<int>& nums) {
        //For this condition to be true, total array sum must be even
        int n = nums.size(), sum=0;
        for(int i=0; i<n;i++)
            sum+=nums[i];
        if(sum%2!=0)
            return 0;
        int target = sum/2;
        vector<vector<int>>dp(n+1,vector<int>(target+1, -1));
        return solve(nums,n,target,dp);
    }
};