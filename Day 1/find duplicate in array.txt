class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        for(int i=0; i<nums.size()-1;i++)
            if(nums[i]==nums[i+1])
                return nums[i];
        return 0;
    }
};


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_map<int,int>mp;
        for(int i=0; i<nums.size();i++){
            if(mp.find(nums[i])!=mp.end())
                mp[nums[i]]++;
            else mp[nums[i]]=1;
        }
        for(auto it=mp.begin();it!=mp.end();it++)
            if(it->second>1)
                return it->first;
        return 0;
    }
};


class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow=nums[0];
        int fast=nums[0];
        
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        
        fast = nums[0];
        while(slow!=fast){
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
};
https://bit.ly/2FsAiTv