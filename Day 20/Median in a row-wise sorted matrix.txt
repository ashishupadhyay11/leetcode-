https://youtu.be/BpETOGNqKmo

int Solution::findMedian(vector<vector<int> > &a) {
    int n = a.size(), m = a[0].size(), min = a[0][0], max = a[0][0];
    for(int i=0; i<n ;i++){
        if(a[i][0] < min)
            min = a[i][0];
        if(a[i][m-1] > max)
            max = a[i][m-1];
    }
    int desired = (1+n*m)/2;
    while(min<max){
        int mid = (min+max)/2;
        int count = 0;
        //find total number of elements less than or eq to curr mid in the entire matrix
        for(int i =0; i<n;i++)
            count += upper_bound(a[i].begin(), a[i].end(), mid) - a[i].begin();
            
        //Apply binary search accordingly
        if(count<desired)   
            min = mid+1;
        else max = mid;
    }
    //return min or max they are the same desired element
    return max; 
}
