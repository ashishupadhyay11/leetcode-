//Use hashtable to optimise isPalindrome function

class Solution {
public:
      bool isPalindrome(string &s, int start, int end){
        while(start<=end)
            if(s[start++]!=s[end--])
                return false;
        return true;
    }
    
    void dfs(int index, string &s, vector<string>&path, vector<vector<string>>&result){
        if(index==s.size()){            //The whole string has been explored
            result.push_back(path);
            return;
        }
        for(int i=index; i<s.size();i++){
            if(isPalindrome(s,index,i)){       //if curr substr is a palindrome
                path.push_back(s.substr(index, i-index+1)); //push it in curr path
                dfs(i+1,s,path,result);     //explore rest of the string
                path.pop_back();        //backtrack for other possible combinations
            }
        }
    }
  
    vector<vector<string>> partition(string s) {
        vector<vector<string>>result;
        if(s.empty())
            return result;
        
        vector<string>path;
        dfs(0,s,path,result);
        return result;
    }
};