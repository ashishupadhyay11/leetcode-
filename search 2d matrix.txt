//the gfg optimal solution is a less optimal solution for this question, compared to this code
https://leetcode.com/problems/search-a-2d-matrix/submissions/
class Solution {
public:
    bool searchMatrix(vector<vector<int>>&matrix, int target) {
        if(!matrix.size()) 
            return 0;
        int n = matrix.size(), m = matrix[0].size();
        int low = 0, high = (n*m)-1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(matrix[mid/m][mid%m]==target)
                return 1;
            if(matrix[mid/m][mid%m]>target)
                high = mid-1;
            else low = mid+1;
        }
        return 0;
    }
};